#!/usr/bin/env bash

_sc_fail() { echo >&2 "Failed to load or install Privex ShellCore..." && exit 1; }

export DEBIAN_FRONTEND=noninteractive

command -v curl &>/dev/null || {
    echo "Warning: missing curl. Attempting to auto-install curl."
    if ((EUID != 0)); then sudo apt-get install -qq -y curl >/dev/null; else apt-get install -qq -y curl >/dev/null; fi
}

# Run ShellCore auto-install if we can't detect an existing ShellCore load.sh file.
[[ -f "${HOME}/.pv-shcore/load.sh" ]] || [[ -f "/usr/local/share/pv-shcore/load.sh" ]] ||
    { curl -fsS https://cdn.privex.io/github/shell-core/install.sh | bash >/dev/null; } || _sc_fail

# Attempt to load the local install of ShellCore first, then fallback to global install if it's not found.
[[ -d "${HOME}/.pv-shcore" ]] && source "${HOME}/.pv-shcore/load.sh" ||
    source "/usr/local/share/pv-shcore/load.sh" || _sc_fail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

ask_config() {
    local mm_accid="" mm_license=""
    read -p "Please enter your Maxmind account ID (looks like 2123234): " mm_accid
    msg yellow "You've entered: '${mm_accid}'\n"
    read -p "Please enter your Maxmind License Key (looks like: WsdsaHudf7ba): " mm_license
    msg yellow "You've entered: '${mm_license}'\n"

    msg magenta "Please review the details below:\n"
    msg cyan "\tMaxmind Account ID:   ${BOLD}${mm_accid}"
    msg cyan "\tMaxmind License Key:  ${BOLD}${mm_license}"
    msg

    if yesno "${CYAN}Does this look correct? ${RESET}(Y/n) > " defyes; then
        msg green " >> Generating /etc/GeoIP.conf ...\n"
        ((EUID != 0)) && msg yellow "NOTE: If you see a 'Password:' prompt, please enter your user password for sudo."
        sudo tee /etc/GeoIP.conf >/dev/null <<EOF
###
# GeoIP Update Config (Generated by github.com/Someguy123/steem-peers setup.sh)
###
AccountID $mm_accid
LicenseKey $mm_license

# Enter the edition IDs of the databases you would like to update. Multiple edition IDs are separated by spaces.
EditionIDs GeoLite2-ASN GeoLite2-City GeoLite2-Country

## The remaining settings are OPTIONAL.
## The directory to store the database files. Defaults to /usr/share/GeoIP
# DatabaseDirectory /usr/share/GeoIP
## The server to use. Defaults to "updates.maxmind.com".
# Host updates.maxmind.com
## The proxy host name or IP address. You may optionally specify a port number, e.g., 127.0.0.1:8888.
## If no port number is specified, 1080 will be used.
# Proxy 127.0.0.1:8888
## The user name and password to use with your proxy server.
# ProxyUserPassword username:password
## Whether to preserve modification times of files downloaded from the server. Defaults to "0".
# PreserveFileTimes 0
## The lock file to use. This ensures only one geoipupdate process can run at a time.
## Note: Once created, this lockfile is not removed from the filesystem. Defaults to ".geoipupdate.lock" under the DatabaseDirectory.
# LockFile /usr/share/GeoIP/.geoipupdate.lock
EOF

        msg green "\n [+++] Finished generating /etc/GeoIP.conf.\n"
        return 0
    fi
    msg yellow " >> Let's try again then. If you just want to to exit setup.sh, hold CTRL and press C (CTRL-C).\n"
    ask_config
}

import_config() {
    msg green "Please paste your MaxMind GeoIP config into the editor when it opens in a few seconds.\n"
    msg magenta "When you're done editing, hold down CTRL and tap X (CTRL-X), and enter 'yes' when asked if you'd"
    msg magenta "like to save the file.\n"

    sleep 10
    ((EUID != 0)) && msg yellow "NOTE: If you see a 'Password:' prompt, please enter your user password for sudo.\n"

    sudo nano /etc/GeoIP.conf

    msg green "\n >> Here is what your GeoIP.conf looks like:\n"
    cat /etc/GeoIP.conf
    msg
    if yesno "${CYAN}Does this look correct? ${RESET}(Y/n) > " defyes; then
        msg green " [+++] Great! Let's continue."
        return 0
    fi
    msg yellow " >> Let's try again then. If you just want to to exit setup.sh, hold CTRL and press C (CTRL-C).\n"
    import_config
}

ch_config_mode() {
    local ch_choice=""
    msg bold magenta "How would you like to configure GeoIP updater?\n"
    msg magenta "\t - key - Generate a config from you entering the account ID and the license key at a prompt"
    msg magenta "\t - config - Paste in / edit the config by hand"
    msg
    read -p "${CYAN}Please select an option [default: key] ${RESET}> " ch_choice

    if [ -z "$ch_choice" ]; then
        ch_choice='key'
    fi

    case "$ch_choice" in
        key* | KEY* | acc* | ACC* | lice* | LICE*)
            ask_config
            ;;
        con* | CON* | paste | PASTE | edit* | EDIT*)
            import_config
            ;;
        *)
            msg bold red "\n [!!!] Invalid Choice. Enter either 'key' or 'config'."
            msg bold red "[!!!] Press CTRL-C if you need to exit. \n"
            ch_config_mode
            return $?
            ;;
    esac
}

detect_geodir() {
    local _gdir="/usr/share/GeoIP"
    (($# > 0)) && _gdir="$1"

    if [[ -d "$_gdir" ]]; then
        echo "$_gdir"
        return 0
    fi

    if [[ -d "/usr/share/GeoIP" ]]; then
        echo "/usr/share/GeoIP"
    elif [[ -d "/var/lib/GeoIP" ]]; then
        echo "/var/lib/GeoIP"
    elif [[ -d "/usr/local/share/GeoIP" ]]; then
        echo "/usr/local/share/GeoIP"
    elif [[ -d "/usr/local/var/GeoIP" ]]; then
        echo "/usr/local/var/GeoIP"
    elif [[ -d "/usr/lib/GeoIP" ]]; then
        echo "/usr/lib/GeoIP"
    else
        echo
    fi
}

has-geo-ppa() { ls -l /etc/apt/sources.list.d/maxmind*ppa*.list &>/dev/null; }
pkg-exists() { apt show "$1" &>/dev/null; }
pkg-installed() { dpkg -s "$1" &>/dev/null; }
install-pkgs() {
    msg bold green "\n [...] Installing package(s): $*\n"
    DEBIAN_FRONTEND=noninteractive sudo apt-get install -qq -y "$@" >/dev/null
    msg bold green "\n [+++] Finished installing package(s): $* \n"
}

install-if-exists() {
    local existent_pkgs=()

    for pk in "$@"; do
        if pkg-installed "$pk"; then
            continue
        fi
        pkg-exists "$pk" && existent_pkgs+=("$pk")
    done

    if ((${#existent_pkgs[@]} > 0)); then
        install-pkgs "${existent_pkgs[@]}"
    else
        return 1
    fi
}

install_geoipupdate() {
    local geo_dir="/usr/share/GeoIP"

    ((EUID != 0)) && msg yellow "NOTE: If you see a 'Password:' prompt, please enter your user password for sudo."

    if has-geo-ppa; then
        msg green " [+] Maxmind PPA appears to be already enabled (found maxmind list file in /etc/apt/sources.list.d)"
    else
        msg bold green "\n >> Running apt update ...\n"
        sudo apt-get update -qy >/dev/null

        msg bold green "\n >> Ensuring software-properties-common is installed ...\n"
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -qq -y software-properties-common >/dev/null

        msg bold green "\n >> Enabling PPA ppa:maxmind/ppa ...\n"
        DEBIAN_FRONTEND=noninteractive sudo add-apt-repository -y ppa:maxmind/ppa
    fi

    if dpkg -s geoipupdate &>/dev/null; then
        msg green " [+] GeoIP update appears to already be installed (found 'geoipupdate' package installed)"
    else
        msg bold green "\n >> Running apt update ...\n"
        DEBIAN_FRONTEND=noninteractive sudo apt-get update -qy >/dev/null

        msg bold green "\n >> Installing geoipupdate ...\n"
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -qq -y geoipupdate
    fi

    geo_dir="$(detect_geodir '/usr/share/GeoIP')"

    if [ -n "$geo_dir" ]; then
        msg bold magenta "\n >> Current contents of $geo_dir ::\n"
        ls -lh "$geo_dir"
    fi

    msg green "\n >> Running geoipupdate for the first time ...\n"
    sudo geoipupdate -v

    if [ -z "$geo_dir" ]; then
        geo_dir="$(detect_geodir '/usr/share/GeoIP')"
    fi

    if [ -n "$geo_dir" ]; then
        msg bold magenta "\n >> Updated contents of $geo_dir ::\n"
        ls -lh "$geo_dir"
    else
        msg yellow " [!!!] Warning: Could not detect GeoIP database output folder for geoipupdate. Check the logs for any errors..."
    fi

    msg bold green "\n [+++] Finished installing 'geoipupdate'\n"
}

easy_geoipupdate() {
    if [[ ! -f "/etc/GeoIP.conf" ]]; then
        msg yellow " [!!!] It looks like you don't have a GeoIP updater config file at /etc/GeoIP.conf"
        msg yellow " [!!!] We can help you create one.\n"

        msg yellow " [!!!] Before starting our assisted GeoIP auto-updater setup, please ensure you have"
        msg yellow " [!!!] created a MaxMind account, and have generated a License Key (they're free)"
        msg yellow " [!!!] which is compatible with GeoIP Updater '3.1.1 or above/newer'.\n"
    fi

    msg bold magenta "Select one of the following options:\n"
    msg magenta "\t - both - Setup the GeoIP updater config, then install GeoIP updater + weekly cron"
    msg magenta "\t - install - Install GeoIP updater and the cron for automatic weekly updates"
    msg magenta "\t - config - Create / replace the GeoIP updater configuration"
    msg

    read -p "${CYAN}Please select an option [default: both] ${RESET}> " geo_choice

    if [ -z "$geo_choice" ]; then
        geo_choice='both'
    fi

    case "$geo_choice" in
        bot* | BOT*)
            ch_config_mode
            install_geoipupdate
            ;;
        inst* | INST*)
            install_geoipupdate
            ;;
        conf* | CONF*)
            ch_config_mode
            ;;
        *)
            msg bold red "\n [!!!] Invalid Choice. Enter either 'both', 'install', or 'config'"
            msg bold red "[!!!] Press CTRL-C if you need to exit. \n"
            sleep 2
            easy_geoipupdate
            return $?
            ;;
    esac
}

install_project() {

    pkg_not_found netstat net-tools

    msg bold green " >> Installing default systemwide 'python3' and related packages..."

    install-if-exists python3 python3-dev python3-pip python3-wheel python3-venv

    msg bold green " >> Attempting to install latest version of Python available from APT..."

    if pkg-exists python3.8 && ! pkg-installed python3.8; then
        install-if-exists python3.8 python3.8-dev python3.8-pip python3.8-venv
    elif pkg-exists python3.7 && ! pkg-installed python3.7; then
        install-if-exists python3.7 python3.7-dev python3.7-pip python3.7-venv
    elif pkg-exists python3.6 && ! pkg-installed python3.6; then
        install-if-exists python3.6 python3.6-dev python3.6-pip python3.6-venv
    elif ! has_binary python3; then
        msg red " [!!!] ERROR: Could not find valid python package to install, and 'python3' binary is not available"
        exit 1
    fi

    msg bold green " >> Installing Python requirements from file ${DIR}/requirements.txt"

    cd "$DIR"

    if has_command pip3; then
        msg green " >> Installing requirements into global Python 3 (using 'pip3')..."
        pip3 install -U -r requirements.txt
    elif python3 -m pip >/dev/null; then
        msg green " >> Installing requirements into global Python 3 (using 'python3 -m pip')..."
        python3 -m pip install -U -r requirements.txt
    else
        msg bold yellow " [!!!] WARN: Couldn't find 'pip3' command, nor working pip submodule 'python3 -m pip' - for global python3"
    fi

    if has_binary python3.8 && python3.8 -m pip >/dev/null; then
        msg green " >> Installing requirements into global Python 3.8 (using 'python3.8 -m pip')..."
        python3.8 -m pip install -U -r requirements.txt
    elif has_binary python3.7 && python3.7 -m pip >/dev/null; then
        msg green " >> Installing requirements into global Python 3.7 (using 'python3.7 -m pip')..."
        python3.7 -m pip install -U -r requirements.txt
    elif has_binary python3.6 && python3.6 -m pip >/dev/null; then
        msg green " >> Installing requirements into global Python 3.6 (using 'python3.6 -m pip')..."
        python3.6 -m pip install -U -r requirements.txt
    else
        msg bold yellow " [!!!] WARN: Couldn't detect working 'pip' for Python 3.6, 3.7 and 3.8"
    fi

}

menu-select() {
    case "$1" in
        inst* | INST*)
            install_project
            msg green " >>> Finished installing project dependencies"
            return 1
            ;;
        geo* | GEO*)
            easy_geoipupdate
            msg green " >>> Finished running GeoIP installation / configuration"
            return 1
            ;;
        exit | quit | EXIT | QUIT)
            return 0
            ;;
        *)
            msg bold red "\n [!!!] Invalid Choice. Enter either 'geoip' or 'install'"
            msg bold red "[!!!] Press CTRL-C if you need to exit. \n"
            sleep 2
            return 1
            ;;
    esac
}

if (($# > 0)); then
    menu-select "$1" || true
    exit
fi

while true; do
    msg bold magenta "Select one of the following options:\n"
    msg magenta "\t - geoip - Configure and/or install GeoIP auto-updater (also installs GeoIP db's for the first time)"
    msg magenta "\t - install - Install project dependencies - Ensures Python is installed, and installs required python packages"
    msg magenta "\t - exit - Exit / quit this setup script"
    msg

    read -p "${CYAN}Please select an option ${RESET}> " geo_choice

    if menu-select "$geo_choice"; then
        break
    fi
done
